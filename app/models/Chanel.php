<?php
/**
 * Created by PhpStorm.
 * User: michael
 * Date: 1/6/15
 * Time: 18:01
 */

class Chanel extends DBAccess{
    private static $instance;

    public static function getInstance()
    {
        if(self::$instance==null) {
            self::$instance=new Chanel();
        }
        return self::$instance;
    }
    public function __construct()
    {
        parent::__construct('chanel'); // TODO: Change the autogenerated stub
    }
    public function isValid($id)
    {
        $sql="select count(*) as count from chanel where id=?";
        $result=DBConnection::read()->select($sql,array($id));

        if($result[0]->count>0) {
            return true;
        } else {
            return false;
        }
    }
    public function get($id,$since,$limit) {
        $chanel=$this->getOneObjectByField(array('id'=>$id));
        if(!$chanel) {
            return array();
        }
        $movies=Movie::getInstance()->getByChanelId($id,$since,$limit);
        return $this->composeResponse($chanel,$movies);
    }

    public function composeResponse($chanel,$movies) {
        // is_followed is bool type
        if(!is_array($movies)) {
            $movies=array($movies);
        }

        $chanel=(array)$chanel;

        $chanel['movies']=array();

        foreach ($movies as $movie) {
            $chanel['movies'][]=Movie::getInstance()->composeResponse($movie);
        }
        $chanel= (object)$chanel;

        $chanel->id=intval($chanel->id);
        $chanel->created_at=intval(strtotime($chanel->created_at));
        $chanel->updated_at=intval(strtotime($chanel->updated_at));
        $chanel->order=intval($chanel->order);

        return $chanel;
    }

    public function insertMovie($matchs)
    {
        $movie=Movie::getInstance()->getOneObjectByField(array('match_url'=>$matchs->match_url));

        if($movie==null) {
            // insert new
            $movie_input=array(
                'id'=>$matchs->id,
                'created_at'=>array('now()'),
                'title'=>$matchs->title,
                'url'=>$matchs->url,
                'match_url'=>$matchs->match_url,
                'thumb'=>$matchs->thumb
            );
            Movie::getInstance()->insert($movie_input);
            BackgroundProcess::getInstance()->throwProcess(
                "/crons/video/download",
                array(
                'url'=>$matchs->url,
                'title'=>$matchs->title
                ));

        } else {
            // update
            if($movie->url!=$matchs->url) {
                // update movie url
                Movie::getInstance()->update(array('url'=>$matchs->url,'is_updated'=>1),array('match_url'=>$movie->match_url));

                // create process to upload video again to dailymotion
                BackgroundProcess::getInstance()->throwProcess(
                    "/crons/video/download",
                    array(
                        'url'=>$matchs->url,
                        'title'=>$matchs->title
                    ));
            }
        }
    }


} 